// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package datastoretest

import (
	"context"
	"github.com/ONSdigital/dp-healthcheck/healthcheck"
	"github.com/cadmiumcat/books-api/config"
	"github.com/cadmiumcat/books-api/interfaces"
	"github.com/cadmiumcat/books-api/models"
	"sync"
)

// Ensure, that DataStoreMock does implement interfaces.DataStore.
// If this is not the case, regenerate this file with moq.
var _ interfaces.DataStore = &DataStoreMock{}

// DataStoreMock is a mock implementation of interfaces.DataStore.
//
//     func TestSomethingThatUsesDataStore(t *testing.T) {
//
//         // make and configure a mocked interfaces.DataStore
//         mockedDataStore := &DataStoreMock{
//             AddBookFunc: func(book *models.Book)  {
// 	               panic("mock out the AddBook method")
//             },
//             CheckerFunc: func(ctx context.Context, state *healthcheck.CheckState) error {
// 	               panic("mock out the Checker method")
//             },
//             CloseFunc: func(ctx context.Context) error {
// 	               panic("mock out the Close method")
//             },
//             GetBookFunc: func(id string) (*models.Book, error) {
// 	               panic("mock out the GetBook method")
//             },
//             GetBooksFunc: func() (models.Books, error) {
// 	               panic("mock out the GetBooks method")
//             },
//             InitFunc: func(in1 config.MongoConfig) error {
// 	               panic("mock out the Init method")
//             },
//         }
//
//         // use mockedDataStore in code that requires interfaces.DataStore
//         // and then make assertions.
//
//     }
type DataStoreMock struct {
	// AddBookFunc mocks the AddBook method.
	AddBookFunc func(book *models.Book)

	// CheckerFunc mocks the Checker method.
	CheckerFunc func(ctx context.Context, state *healthcheck.CheckState) error

	// CloseFunc mocks the Close method.
	CloseFunc func(ctx context.Context) error

	// GetBookFunc mocks the GetBook method.
	GetBookFunc func(id string) (*models.Book, error)

	// GetBooksFunc mocks the GetBooks method.
	GetBooksFunc func() (models.Books, error)

	// InitFunc mocks the Init method.
	InitFunc func(in1 config.MongoConfig) error

	// calls tracks calls to the methods.
	calls struct {
		// AddBook holds details about calls to the AddBook method.
		AddBook []struct {
			// Book is the book argument value.
			Book *models.Book
		}
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// State is the state argument value.
			State *healthcheck.CheckState
		}
		// Close holds details about calls to the Close method.
		Close []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetBook holds details about calls to the GetBook method.
		GetBook []struct {
			// ID is the id argument value.
			ID string
		}
		// GetBooks holds details about calls to the GetBooks method.
		GetBooks []struct {
		}
		// Init holds details about calls to the Init method.
		Init []struct {
			// In1 is the in1 argument value.
			In1 config.MongoConfig
		}
	}
	lockAddBook  sync.RWMutex
	lockChecker  sync.RWMutex
	lockClose    sync.RWMutex
	lockGetBook  sync.RWMutex
	lockGetBooks sync.RWMutex
	lockInit     sync.RWMutex
}

// AddBook calls AddBookFunc.
func (mock *DataStoreMock) AddBook(book *models.Book) {
	if mock.AddBookFunc == nil {
		panic("DataStoreMock.AddBookFunc: method is nil but DataStore.AddBook was just called")
	}
	callInfo := struct {
		Book *models.Book
	}{
		Book: book,
	}
	mock.lockAddBook.Lock()
	mock.calls.AddBook = append(mock.calls.AddBook, callInfo)
	mock.lockAddBook.Unlock()
	mock.AddBookFunc(book)
}

// AddBookCalls gets all the calls that were made to AddBook.
// Check the length with:
//     len(mockedDataStore.AddBookCalls())
func (mock *DataStoreMock) AddBookCalls() []struct {
	Book *models.Book
} {
	var calls []struct {
		Book *models.Book
	}
	mock.lockAddBook.RLock()
	calls = mock.calls.AddBook
	mock.lockAddBook.RUnlock()
	return calls
}

// Checker calls CheckerFunc.
func (mock *DataStoreMock) Checker(ctx context.Context, state *healthcheck.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("DataStoreMock.CheckerFunc: method is nil but DataStore.Checker was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		State *healthcheck.CheckState
	}{
		Ctx:   ctx,
		State: state,
	}
	mock.lockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	mock.lockChecker.Unlock()
	return mock.CheckerFunc(ctx, state)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//     len(mockedDataStore.CheckerCalls())
func (mock *DataStoreMock) CheckerCalls() []struct {
	Ctx   context.Context
	State *healthcheck.CheckState
} {
	var calls []struct {
		Ctx   context.Context
		State *healthcheck.CheckState
	}
	mock.lockChecker.RLock()
	calls = mock.calls.Checker
	mock.lockChecker.RUnlock()
	return calls
}

// Close calls CloseFunc.
func (mock *DataStoreMock) Close(ctx context.Context) error {
	if mock.CloseFunc == nil {
		panic("DataStoreMock.CloseFunc: method is nil but DataStore.Close was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc(ctx)
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//     len(mockedDataStore.CloseCalls())
func (mock *DataStoreMock) CloseCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// GetBook calls GetBookFunc.
func (mock *DataStoreMock) GetBook(id string) (*models.Book, error) {
	if mock.GetBookFunc == nil {
		panic("DataStoreMock.GetBookFunc: method is nil but DataStore.GetBook was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	mock.lockGetBook.Lock()
	mock.calls.GetBook = append(mock.calls.GetBook, callInfo)
	mock.lockGetBook.Unlock()
	return mock.GetBookFunc(id)
}

// GetBookCalls gets all the calls that were made to GetBook.
// Check the length with:
//     len(mockedDataStore.GetBookCalls())
func (mock *DataStoreMock) GetBookCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	mock.lockGetBook.RLock()
	calls = mock.calls.GetBook
	mock.lockGetBook.RUnlock()
	return calls
}

// GetBooks calls GetBooksFunc.
func (mock *DataStoreMock) GetBooks() (models.Books, error) {
	if mock.GetBooksFunc == nil {
		panic("DataStoreMock.GetBooksFunc: method is nil but DataStore.GetBooks was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetBooks.Lock()
	mock.calls.GetBooks = append(mock.calls.GetBooks, callInfo)
	mock.lockGetBooks.Unlock()
	return mock.GetBooksFunc()
}

// GetBooksCalls gets all the calls that were made to GetBooks.
// Check the length with:
//     len(mockedDataStore.GetBooksCalls())
func (mock *DataStoreMock) GetBooksCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetBooks.RLock()
	calls = mock.calls.GetBooks
	mock.lockGetBooks.RUnlock()
	return calls
}

// Init calls InitFunc.
func (mock *DataStoreMock) Init(in1 config.MongoConfig) error {
	if mock.InitFunc == nil {
		panic("DataStoreMock.InitFunc: method is nil but DataStore.Init was just called")
	}
	callInfo := struct {
		In1 config.MongoConfig
	}{
		In1: in1,
	}
	mock.lockInit.Lock()
	mock.calls.Init = append(mock.calls.Init, callInfo)
	mock.lockInit.Unlock()
	return mock.InitFunc(in1)
}

// InitCalls gets all the calls that were made to Init.
// Check the length with:
//     len(mockedDataStore.InitCalls())
func (mock *DataStoreMock) InitCalls() []struct {
	In1 config.MongoConfig
} {
	var calls []struct {
		In1 config.MongoConfig
	}
	mock.lockInit.RLock()
	calls = mock.calls.Init
	mock.lockInit.RUnlock()
	return calls
}
