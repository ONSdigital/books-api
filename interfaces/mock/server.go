// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/cadmiumcat/books-api/interfaces"
	"sync"
)

// Ensure, that HTTPServerMock does implement interfaces.HTTPServer.
// If this is not the case, regenerate this file with moq.
var _ interfaces.HTTPServer = &HTTPServerMock{}

// HTTPServerMock is a mock implementation of interfaces.HTTPServer.
//
//     func TestSomethingThatUsesHTTPServer(t *testing.T) {
//
//         // make and configure a mocked interfaces.HTTPServer
//         mockedHTTPServer := &HTTPServerMock{
//             ListenAndServeFunc: func() error {
// 	               panic("mock out the ListenAndServe method")
//             },
//         }
//
//         // use mockedHTTPServer in code that requires interfaces.HTTPServer
//         // and then make assertions.
//
//     }
type HTTPServerMock struct {
	// ListenAndServeFunc mocks the ListenAndServe method.
	ListenAndServeFunc func() error

	// calls tracks calls to the methods.
	calls struct {
		// ListenAndServe holds details about calls to the ListenAndServe method.
		ListenAndServe []struct {
		}
	}
	lockListenAndServe sync.RWMutex
}

// ListenAndServe calls ListenAndServeFunc.
func (mock *HTTPServerMock) ListenAndServe() error {
	if mock.ListenAndServeFunc == nil {
		panic("HTTPServerMock.ListenAndServeFunc: method is nil but HTTPServer.ListenAndServe was just called")
	}
	callInfo := struct {
	}{}
	mock.lockListenAndServe.Lock()
	mock.calls.ListenAndServe = append(mock.calls.ListenAndServe, callInfo)
	mock.lockListenAndServe.Unlock()
	return mock.ListenAndServeFunc()
}

// ListenAndServeCalls gets all the calls that were made to ListenAndServe.
// Check the length with:
//     len(mockedHTTPServer.ListenAndServeCalls())
func (mock *HTTPServerMock) ListenAndServeCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockListenAndServe.RLock()
	calls = mock.calls.ListenAndServe
	mock.lockListenAndServe.RUnlock()
	return calls
}
